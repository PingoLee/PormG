module Generator

import PormG: DB_PATH

# I want generate files with db models, can you help me?
# example:
# users = Models.PormGModel("users", 
#   name = Models.CharField(), 
#   email = Models.CharField(), 
#   age = Models.IntegerField()
# )

# cars = Models.PormGModel("cars", 
#   user = Models.ForeignKey(users, "CASCADE"),
#   name = Models.CharField(), 
#   brand = Models.CharField(), 
#   year = Models.IntegerField()
# )
# I Need open a sqlight db and get all tables and columns to generate the models.jl file


function generate_models_from_db(db::SQLite.DB; path::String=DB_PATH) :: Nothing
  tables = SQLite.tables(db)
  columns = SQLite.columns(db)

  open(joinpath(path, "models.jl"), "w") do f
    write(f, "module Models\n\n")
    for table in tables
      write(f, "struct $(Inflector.singularize(Inflector.camelize(table)))\n")
      for column in columns
        if column.table_name == table
          write(f, "  $(Inflector.singularize(Inflector.camelize(column.name)))::$(column.type)\n")
        end
      end
      write(f, "end\n\n")
    end
    write(f, "end\n")
  end

  nothing
end

function write_app_custom_files(path::String, app_path::String) :: Nothing
  moduleinfo = Genie.FileTemplates.appmodule(path)

  open(joinpath(app_path, Genie.config.path_src, moduleinfo[1] * ".jl"), "w") do f
    write(f, moduleinfo[2])
  end

  open(joinpath(app_path, Genie.BOOTSTRAP_FILE_NAME), "w") do f
    write(f,
    """
    (pwd() != @__DIR__) && cd(@__DIR__) # allow starting app from bin/ dir

    using $(moduleinfo[1])
    const UserApp = $(moduleinfo[1])
    $(moduleinfo[1]).main()
    """)
  end

  isdir(joinpath(app_path, "test")) || mkpath(joinpath(app_path, "test"))
  open(joinpath(app_path, "test", "runtests.jl"), "w") do f
    write(f,
      """
      # This file is autogenerated to run all tests in the context of your Genie app.
      # It is not necessary to edit this file.
      # To create tests, simply add `.jl` test files in the `test/` folder.
      # All `.jl` files in the `test/` folder will be automatically executed by running `\$ julia --project runtests.jl`
      # If you want to selectively run tests, use `\$ julia --project runtests.jl test_file_1 test_file_2`

      ENV["GENIE_ENV"] = "test"
      push!(LOAD_PATH, abspath(normpath(joinpath("..", "src"))))

      cd("..")
      using Pkg
      Pkg.activate(".")

      using Genie
      Genie.loadapp()

      cd(@__DIR__)
      Pkg.activate(".")

      # !!! Main.UserApp is configured as an alias for Main.$(moduleinfo[1]) and you might encounter it in some tests
      using Main.$(moduleinfo[1]), Test, TestSetExtensions, Logging

      Logging.global_logger(NullLogger())

      @testset ExtendedTestSet "$(moduleinfo[1]) tests" begin
        @includetests ARGS
      end
      """)
  end

  nothing
end
  
end